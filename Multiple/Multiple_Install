#!/bin/bash

# Запрос уникального идентификатора у пользователя
read -p "Введите уникальный идентификатор (identifier): " IDENTIFIER

# Фиксированные параметры
NODE_NAME="Multiple"   # Имя контейнера
PIN="000000"           # PIN-код
STORAGE=1              # Размер хранилища (в GB)
BANDWIDTH_UPLOAD=1000  # Исходящий трафик (в Mbps)
BANDWIDTH_DOWNLOAD=1000 # Входящий трафик (в Mbps)

# Удаление существующего контейнера, если он есть
echo "=== Проверяем существование контейнера $NODE_NAME ==="
if docker ps -a --format '{{.Names}}' | grep -wq "$NODE_NAME"; then
    echo "Контейнер $NODE_NAME найден. Удаляем..."
    docker rm -f $NODE_NAME
else
    echo "Контейнер $NODE_NAME не найден. Продолжаем."
fi

# Создание Dockerfile
echo "=== Создаем Dockerfile ==="
cat << 'EOF' > Dockerfile
# Используем базовый образ Ubuntu 22.04
FROM ubuntu:22.04

# Исправление списка репозиториев и установка необходимых пакетов
RUN sed -i 's|http://archive.ubuntu.com/ubuntu|http://mirror.yandex.ru/ubuntu|g' /etc/apt/sources.list && \
    apt-get update && \
    apt-get install -y wget tar libicu-dev locales && \
    apt-get clean

# Настройка локалей
RUN locale-gen en_US.UTF-8 && update-locale LANG=en_US.UTF-8

# Настройка ICU и .NET
ENV DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=1
ENV DOTNET_DiagnosticPorts=/tmp/dotnet-trace
ENV LC_ALL=en_US.UTF-8
ENV LANG=en_US.UTF-8
ENV LANGUAGE=en_US.UTF-8

# Скачивание клиента Multiple (определяется автоматически)
ARG ARCH=x64
RUN echo "=== Скачиваем клиент Multiple ===" && \
    mkdir -p /opt/multiple/Tracks /opt/multiple/Config /opt/multiple/logs && \
    wget -O /tmp/multiple.tar https://cdn.app.multiple.cc/client/linux/$ARCH/multipleforlinux.tar && \
    echo "=== Распаковываем клиент ===" && \
    tar -xvf /tmp/multiple.tar -C /opt/multiple && \
    echo "=== Перемещаем исполняемые файлы ===" && \
    mv /opt/multiple/*/multiple-cli /opt/multiple/multiple-cli 2>/dev/null || true && \
    mv /opt/multiple/*/multiple-node /opt/multiple/multiple-node 2>/dev/null || true && \
    echo "=== Устанавливаем права доступа ===" && \
    chmod -R 777 /opt/multiple && \
    echo "<?xml version=\"1.0\"?><configuration><appSettings></appSettings></configuration>" > /opt/multiple/Config/app.config && \
    chmod 666 /opt/multiple/Config/app.config

# Проверка прав доступа
RUN echo "=== Проверяем права доступа на директории ===" && \
    ls -ld /opt/multiple /opt/multiple/Tracks /opt/multiple/Config /opt/multiple/logs && \
    ls -la /opt/multiple/Config

# Настройка PATH
ENV PATH="/opt/multiple:$PATH"

# Установка точки входа с отладочными параметрами
WORKDIR /opt/multiple
ENTRYPOINT ["./multiple-node", "--verbose", "--debug", "--trace"]
EOF

# Определение архитектуры и сборка образа
ARCH=$(uname -m)
echo "=== Определяем архитектуру системы: $ARCH ==="
if [[ "$ARCH" == "x86_64" ]]; then
    ARCH="x64"
elif [[ "$ARCH" == "aarch64" ]]; then
    ARCH="arm64"
else
    echo "Неподдерживаемая архитектура: $ARCH"
    exit 1
fi

echo "=== Начинаем сборку Docker-образа ==="
docker build --no-cache --build-arg ARCH=$ARCH -t multiple-node .

# Запуск контейнера
echo "=== Запускаем контейнер $NODE_NAME ==="
docker run -d --name $NODE_NAME --restart always multiple-node

# Проверка ICU и директорий
echo "=== Проверка ICU и прав доступа в контейнере ==="
docker exec -it $NODE_NAME bash -c "ldconfig -p | grep icu"
docker exec -it $NODE_NAME bash -c "ls -ld /opt/multiple /opt/multiple/Tracks /opt/multiple/Config /opt/multiple/logs"
docker exec -it $NODE_NAME bash -c "ls -la /opt/multiple/Config"

# Привязка учетной записи с отладкой
echo "=== Привязка учетной записи ==="
docker exec -it $NODE_NAME ./multiple-cli bind \
    --bandwidth-download $BANDWIDTH_DOWNLOAD \
    --identifier $IDENTIFIER \
    --pin $PIN \
    --storage $STORAGE \
    --bandwidth-upload $BANDWIDTH_UPLOAD \
    --verbose

# Проверка логов приложения
echo "=== Проверяем логи приложения ==="
docker exec -it $NODE_NAME bash -c "cat /opt/multiple/logs/$(date +'%Y-%m-%d').log"

# Подключение к логам
echo "=== Запущен просмотр логов. Нажмите Ctrl+C для выхода ==="
docker logs -f $NODE_NAME
