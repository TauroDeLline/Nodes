#!/usr/bin/env bash
set -e

# 1. Remove old container and images named "initverse"
echo "Stopping/removing old initverse container (if any)..."
docker stop initverse 2>/dev/null || true
docker rm initverse 2>/dev/null || true

echo "Removing old initverse images (if any)..."
IMAGES_TO_REMOVE=$(docker images --format '{{.Repository}}:{{.Tag}} {{.ID}}' | grep -i 'initverse' || true)
if [ -n "$IMAGES_TO_REMOVE" ]; then
  while read -r line; do
    IMAGE_ID=$(echo "$line" | awk '{print $2}')
    docker rmi -f "$IMAGE_ID" || true
  done <<< "$IMAGES_TO_REMOVE"
fi

# 2. Ask user for miner name and wallet address
echo "Docker container setup for initverse mining."
read -rp "Enter miner name (e.g. Worker001): " MINER_NAME
[ -z "$MINER_NAME" ] && { echo "Error: miner name cannot be empty!"; exit 1; }

# read -rp "Enter wallet address (e.g. 0x12345...): " WALLET_ADDRESS
# [ -z "$WALLET_ADDRESS" ] && { echo "Error: wallet address cannot be empty!"; exit 1; }

# 3. Find a free port, starting from 32672
function is_port_free() {
  local port_check="$1"
  if ss -lnt 2>/dev/null | awk '{print $4}' | grep -E ":${port_check}$" > /dev/null; then
    return 1
  else
    return 0
  fi
}

function get_free_port() {
  local base_port=32672
  local max_offset=100
  for (( i=0; i<max_offset; i++ )); do
    local candidate=$((base_port + i))
    if is_port_free "$candidate"; then
      echo "$candidate"
      return 0
    fi
  done
  return 1
}

HOST_PORT=$(get_free_port)
if [ -z "$HOST_PORT" ]; then
  echo "Error: no free port found in range 32672-32772."
  exit 1
fi
CONTAINER_PORT=32672
echo "Using port $HOST_PORT on host."

# 4. Generate Dockerfile and docker-compose.yml
cat <<'EOF' > Dockerfile
FROM ubuntu:22.04

ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update && apt-get upgrade -y && apt-get install -y \
    wget \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

RUN useradd -ms /bin/bash ininode
ENV PS1="(initverse) \u@\h:\w\$ "

WORKDIR /home/ininode
USER ininode

RUN wget -q https://github.com/Project-InitVerse/miner/releases/download/v1.0.0/iniminer-linux-x64 -O iniminer-linux-x64 \
    && chmod +x iniminer-linux-x64

CMD ["bash", "-c", "echo initverse container is built. Ready to run."]
EOF

cat <<EOF > docker-compose.yml
services:
  initverse:
    container_name: initverse
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "${HOST_PORT}:${CONTAINER_PORT}"
    command:
      - "/bin/bash"
      - "-c"
      - "./iniminer-linux-x64 --pool stratum+tcp://0x3cb0e9b59cfc6a15e18e8bb7e425c8c10750bdf2.${MINER_NAME}@pool-a.yatespool.com:${CONTAINER_PORT}"
EOF

# 5. Build without cache and start container with force recreate
echo "Building and starting container initverse..."
docker-compose build --no-cache
docker-compose up -d --force-recreate

# Check if container is running
if ! docker ps --format '{{.Names}}' | grep -q "^initverse\$"; then
  echo "Error: container initverse not running."
  exit 1
fi

# 6. Show logs
echo "Container 'initverse' is running. Showing logs (Ctrl+C to exit)."
docker logs -f initverse
