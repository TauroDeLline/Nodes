#!/bin/bash

# === Переменные ===
DOCKERFILE_NAME="Dockerfile.sonaric"
IMAGE_NAME="sonaricd:latest"
CONTAINER_NAME="sonaric_node"
DNS_PORT=1053
GUI_PORT=44004

# === Функция проверки доступности порта ===
function find_free_port() {
    local port=$1
    while ss -lntu | grep -q ":$port "; do
        port=$((port + 1))
    done
    echo $port
}

# === Подготовка Dockerfile ===
cat > $DOCKERFILE_NAME <<EOF
FROM ubuntu:22.04

# Устанавливаем зависимости
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg \
    wget && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Настраиваем ключи и репозиторий Sonaric
RUN mkdir -p /etc/apt/keyrings && \
    curl -fsSL "https://apt.sonaric.xyz/repo-signing-key.pgp" | gpg --dearmor -o /etc/apt/keyrings/sonaric.gpg && \
    chmod a+r /etc/apt/keyrings/sonaric.gpg && \
    echo "deb [arch=amd64 signed-by=/etc/apt/keyrings/sonaric.gpg] https://apt.sonaric.xyz stable main" > /etc/apt/sources.list.d/sonaric.list && \
    apt-get update

# Устанавливаем Sonaric
RUN DEBIAN_FRONTEND=noninteractive apt-get install -y sonaric && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Обходим ошибки в postinst
RUN sed -i 's/.*groupadd.*//' /var/lib/dpkg/info/sonaricd.postinst && \
    sed -i 's/.*SUDO_USER not set.*//' /var/lib/dpkg/info/sonaricd.postinst && \
    dpkg --configure -a

# Создаем директории для логов
RUN mkdir -p /var/lib/sonaricd/log && touch /var/lib/sonaricd/log/sonaricd.log

# Устанавливаем переменные окружения
ENV DISCOVER_GPU=false

# Копируем скрипт запуска
COPY start-sonaric.sh /usr/local/bin/start-sonaric.sh
RUN chmod +x /usr/local/bin/start-sonaric.sh

# Устанавливаем команду запуска
CMD ["/usr/local/bin/start-sonaric.sh"]
EOF

# === Подготовка скрипта запуска ===
cat > start-sonaric.sh <<EOF
#!/bin/bash

# Проверяем доступность портов
DNS_PORT=\$(find_free_port 1053)
GUI_PORT=\$(find_free_port 44004)

# Запускаем Sonaric
/usr/bin/sonaricd --dns-port \$DNS_PORT --moby-socket unix:///var/run/docker.sock
EOF

# === Строим Docker-образ ===
echo "[INFO] Building Docker image..."
docker build -f $DOCKERFILE_NAME -t $IMAGE_NAME .
if [ $? -ne 0 ]; then
    echo "[ERROR] Docker image build failed."
    exit 1
fi

# === Удаляем старый контейнер, если существует ===
if docker ps -a --format '{{.Names}}' | grep -Eq "^$CONTAINER_NAME\$"; then
    echo "[INFO] Stopping and removing existing container..."
    docker stop $CONTAINER_NAME && docker rm $CONTAINER_NAME
fi

# === Запускаем новый контейнер ===
echo "[INFO] Starting container..."
docker run -d --name $CONTAINER_NAME -p $DNS_PORT:$DNS_PORT/udp -p $GUI_PORT:$GUI_PORT/tcp $IMAGE_NAME
if [ $? -ne 0 ]; then
    echo "[ERROR] Failed to start container."
    exit 1
fi

# === Вывод информации ===
echo "[INFO] Container started successfully."
echo "[INFO] DNS Port: $DNS_PORT"
echo "[INFO] GUI Port: $GUI_PORT"
