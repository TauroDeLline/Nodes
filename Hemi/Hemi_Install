#!/bin/bash

# Цвета текста
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
RED='\033[0;31m'
NC='\033[0m' # Сброс цвета

# Проверка Docker и Docker Compose
if ! command -v docker &> /dev/null; then
    echo -e "${RED}Ошибка: Docker не установлен.${NC}"
    exit 1
fi

if ! docker compose version &> /dev/null; then
    echo -e "${YELLOW}Docker Compose не найден. Устанавливаем...${NC}"
    sudo apt update && sudo apt install -y docker-compose-plugin
    if ! docker compose version &> /dev/null; then
        echo -e "${RED}Ошибка: Не удалось установить Docker Compose.${NC}"
        exit 1
    fi
fi

# Меню выбора действия
echo -e "${YELLOW}Выберите действие:${NC}"
echo "1) Установить контейнер"
echo "2) Обновить контейнер до последней версии"
echo "3) Обновить комиссию"
read -p "Введите номер действия: " ACTION

# Проверка выбора
case $ACTION in
    1)
        echo -e "${YELLOW}Начало установки контейнера.${NC}"
        ;;
    2)
        echo -e "${YELLOW}Обновление контейнера...${NC}"
        ;;
    3)
        echo -e "${YELLOW}Обновление комиссии...${NC}"
        ;;
    *)
        echo -e "${RED}Ошибка: неверный выбор действия!${NC}"
        exit 1
        ;;
esac

# Прямая ссылка на бинарник
BINARY_URL="https://github.com/hemilabs/heminetwork/releases/download/v0.10.0/heminetwork_v0.10.0_linux_amd64.tar.gz"

# Генерация `.env`-файла
generate_env() {
    echo -e "${YELLOW}Создаем .env файл...${NC}"
    cat <<EOT > .env
POPM_BTC_PRIVKEY=$PRIV_KEY
POPM_STATIC_FEE=$FEE
POPM_BFG_URL=wss://testnet.rpc.hemi.network/v1/ws/public
EOT
    echo -e "${GREEN}.env файл создан:${NC}"
    cat .env
}

# Создание docker-compose.yml
generate_docker_compose() {
    echo -e "${YELLOW}Создаем docker-compose.yml...${NC}"
    cat <<EOT > docker-compose.yml
version: '3.8'

services:
  hemi:
    build: .
    container_name: Hemi
    restart: always
    env_file:
      - .env
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
EOT
    echo -e "${GREEN}docker-compose.yml создан.${NC}"
}

# Установка контейнера
install_container() {
    read -p "Введите приватный ключ (оставьте пустым для генерации нового) (POPM_BTC_PRIVKEY): " PRIV_KEY
    read -p "Укажите желаемый размер комиссии (минимум 50) (POPM_STATIC_FEE): " FEE

    if [ "$FEE" -lt 50 ]; then
        echo -e "${RED}Ошибка: комиссия должна быть не меньше 50!${NC}"
        exit 1
    fi

    if [ -z "$PRIV_KEY" ]; then
        echo -e "${YELLOW}Приватный ключ не указан. Генерация нового...${NC}"

        cat <<EOT > Dockerfile
FROM ubuntu:22.04
RUN apt-get update && apt-get install -y wget tar bash jq && rm -rf /var/lib/apt/lists/*
WORKDIR /app
RUN wget -O heminetwork_linux_amd64.tar.gz "$BINARY_URL" && tar --strip-components=1 -xzvf heminetwork_linux_amd64.tar.gz && rm heminetwork_linux_amd64.tar.gz
CMD ["/app/keygen", "-secp256k1", "-json", "-net=testnet"]
EOT

        docker build -t hemi-keygen .
        docker run --rm hemi-keygen > popm-address.json

        PRIV_KEY=$(jq -r '.private_key' popm-address.json)
        PUBKEY_HASH=$(jq -r '.pubkey_hash' popm-address.json)

        echo -e "${GREEN}Новый ключ сгенерирован:${NC}"
        echo -e "${YELLOW}Ваш pubkey_hash: $PUBKEY_HASH${NC}"
    fi

    generate_env
    generate_docker_compose

    cat <<EOT > Dockerfile
FROM ubuntu:22.04
RUN apt-get update && apt-get install -y wget tar bash jq && rm -rf /var/lib/apt/lists/*
WORKDIR /app
RUN wget -O heminetwork_linux_amd64.tar.gz "$BINARY_URL" && tar --strip-components=1 -xzvf heminetwork_linux_amd64.tar.gz && rm heminetwork_linux_amd64.tar.gz
CMD ["/app/popmd"]
EOT

    docker compose up -d --build
}

# Обновление контейнера
update_container() {
    echo -e "${YELLOW}Обновляем контейнер...${NC}"
    docker compose down
    docker compose up -d --build
}

# Обновление комиссии
update_fee() {
    read -p "Введите новое значение комиссии (минимум 50): " NEW_FEE
    if [ "$NEW_FEE" -lt 50 ]; then
        echo -e "${RED}Ошибка: комиссия должна быть не меньше 50!${NC}"
        exit 1
    fi

    sed -i "s|POPM_STATIC_FEE=.*|POPM_STATIC_FEE=$NEW_FEE|" .env
    docker compose up -d
    echo -e "${GREEN}Комиссия успешно обновлена.${NC}"
}

# Выполнение действия
case $ACTION in
    1) install_container ;;
    2) update_container ;;
    3) update_fee ;;
esac

# Проверка контейнера
if [ $(docker ps -q -f name=Hemi | wc -l) -gt 0 ]; then
    echo -e "${GREEN}Контейнер Hemi успешно запущен.${NC}"
else
    echo -e "${RED}Ошибка: контейнер Hemi не запущен.${NC}"
    exit 1
fi
