#!/bin/bash

# ... (остальная часть скрипта остаётся без изменений)

# Функция пересборки Dockerfile для запуска `popmd`
finalize_dockerfile() {
    echo -e "${YELLOW}Обновление Dockerfile для основного запуска...${NC}"
    cat <<EOT > Dockerfile
# Используем базовый образ
FROM ubuntu:22.04

# Устанавливаем необходимые пакеты
RUN apt-get update && apt-get install -y \
    wget tar bash jq && \
    rm -rf /var/lib/apt/lists/*

# Задаем рабочую директорию
WORKDIR /app

# Загружаем бинарный файл Hemi
RUN wget -O heminetwork_linux_amd64.tar.gz "$BINARY_URL" && \
    tar --strip-components=1 -xzvf heminetwork_linux_amd64.tar.gz && \
    rm heminetwork_linux_amd64.tar.gz

# Устанавливаем пользовательский PS1 для bash
ENV PS1="[Hemi] \w\$ "

# Определяем команду запуска
CMD ["/app/popmd"]
EOT

    echo -e "${GREEN}Dockerfile обновлён:${NC}"
    cat Dockerfile
}

# Функция установки контейнера
install_container() {
    echo -e "${YELLOW}Проверка текущего Dockerfile...${NC}"
    if [ -f Dockerfile ]; then
        echo -e "${GREEN}Содержимое Dockerfile перед установкой:${NC}"
        cat Dockerfile
    else
        echo -e "${RED}Dockerfile отсутствует. Выполнение завершено с ошибкой.${NC}"
        exit 1
    fi

    echo -e "${YELLOW}Устанавливаем контейнер Hemi...${NC}"
    docker compose up -d --build > build.log 2>&1
    if [ $? -ne 0 ]; then
        echo -e "${RED}Ошибка установки контейнера. Логи сборки:${NC}"
        cat build.log
        exit 1
    fi
    echo -e "${GREEN}Контейнер успешно установлен!${NC}"
}

# Функция обновления контейнера
update_container() {
    echo -e "${YELLOW}Обновляем контейнер Hemi...${NC}"
    docker compose stop hemi
    docker compose rm -f hemi

    finalize_dockerfile

    docker compose up -d --build > build.log 2>&1
    if [ $? -ne 0 ]; then
        echo -e "${RED}Ошибка запуска контейнера. Логи сборки:${NC}"
        cat build.log
        exit 1
    fi
    echo -e "${GREEN}Контейнер успешно обновлён!${NC}"
}

# Функция изменения комиссии
update_fee() {
    echo -e "${YELLOW}Обновляем значение комиссии...${NC}"
    read -p "Введите новое значение комиссии (минимум 50): " NEW_FEE
    if [ "$NEW_FEE" -lt 50 ]; then
        echo -e "${RED}Ошибка: комиссия должна быть не меньше 50!${NC}"
        exit 1
    fi
    sed -i "s|POPM_STATIC_FEE=.*|POPM_STATIC_FEE=$NEW_FEE|" .env
    echo -e "${GREEN}Обновлен .env файл:$(cat .env)${NC}"
    docker compose stop hemi
    docker compose rm -f hemi

    finalize_dockerfile

    docker compose up -d > build.log 2>&1
    if [ $? -ne 0 ]; then
        echo -e "${RED}Ошибка перезапуска контейнера. Логи сборки:${NC}"
        cat build.log
        exit 1
    fi
    echo -e "${GREEN}Комиссия успешно обновлена!${NC}"
}

# Вызов функций
case $ACTION in
    1)
        finalize_dockerfile
        install_container
        ;;
    2)
        update_container
        ;;
    3)
        update_fee
        ;;
esac

# Проверяем статус контейнера
echo -e "${YELLOW}Проверяем статус контейнера Hemi...${NC}"
if [ $(docker ps -q -f name=Hemi | wc -l) -gt 0 ]; then
    echo -e "${GREEN}Контейнер 'Hemi' успешно запущен!${NC}"
    echo -e "${YELLOW}Используйте команду 'docker logs -f Hemi' для просмотра логов.${NC}"
else
    echo -e "${RED}Ошибка: Контейнер 'Hemi' не запущен.${NC}"
    exit 1
fi
