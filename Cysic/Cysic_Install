#!/bin/bash

# Переменные
CONTAINER_NAME="sonaricd_node"
IMAGE_NAME="sonaricd:latest"
DNS_PORT=1053
GUI_PORT=44004
INITIAL_PORT_DNS=1053
INITIAL_PORT_GUI=44004
MAX_PORT=65000

# Функция для поиска свободного порта
find_free_port() {
    local port=$1
    while ss -lntu | grep -q ":$port "; do
        port=$((port + 1))
        if [ $port -ge $MAX_PORT ]; then
            echo "Нет доступных портов!" >&2
            exit 1
        fi
    done
    echo $port
}

# Проверяем наличие контейнера и удаляем его, если он существует
if docker ps -a --format '{{.Names}}' | grep -q "^${CONTAINER_NAME}$"; then
    echo "Контейнер ${CONTAINER_NAME} существует. Удаляем..."
    docker stop ${CONTAINER_NAME} && docker rm ${CONTAINER_NAME}
fi

# Поиск свободных портов
DNS_PORT=$(find_free_port $INITIAL_PORT_DNS)
GUI_PORT=$(find_free_port $INITIAL_PORT_GUI)

echo "Используем порты: DNS=$DNS_PORT, GUI=$GUI_PORT"

# Запускаем новый контейнер
docker run -d \
    --name ${CONTAINER_NAME} \
    --restart unless-stopped \
    -p ${DNS_PORT}:53/udp \
    -p ${GUI_PORT}:44004/tcp \
    -v /var/run/docker.sock:/var/run/docker.sock \
    ${IMAGE_NAME}

# Проверяем статус контейнера
if [ $? -ne 0 ]; then
    echo "Ошибка запуска контейнера ${CONTAINER_NAME}!"
    exit 1
fi

# Входим в контейнер для выполнения дополнительных действий
docker exec -it ${CONTAINER_NAME} bash << 'EOF'
# 1. Комментируем проблемные строки в файле postinst
sed -i 's/.*groupadd.*//' /var/lib/dpkg/info/sonaricd.postinst
sed -i 's/.*SUDO_USER not set.*//' /var/lib/dpkg/info/sonaricd.postinst

# 2. Настраиваем и перезапускаем конфигурации
dpkg --configure -a

# 3. Проверяем доступность GPU (деактивируем проверку)
export DISCOVER_GPU=false

# 4. Создаем файл логов, если его нет
touch /var/lib/sonaricd/log/sonaricd.log

# 5. Запускаем sonaricd в фоновом режиме
nohup /usr/bin/sonaricd --dns-port ${DNS_PORT} --moby-socket unix:///var/run/docker.sock > /dev/null 2>&1 &
EOF

# Вывод логов контейнера
echo "Запуск контейнера завершен. Выводим логи:"
docker logs -f ${CONTAINER_NAME}
