#!/bin/bash

# Скрипт для автоматической установки и запуска ноды Rivalz в контейнере Docker

# Проверяем, что скрипт выполняется с правами root
if [ "$(id -u)" -ne 0 ]; then
  echo "Пожалуйста, запустите скрипт с правами root."
  exit 1
fi

# Запрос данных у пользователя
read -p "Введите ваш адрес кошелька: " WALLET_ADDRESS
read -p "Укажите объем диска для использования (в ГБ): " DISK_SIZE

# Устанавливаем имя контейнера
CONTAINER_NAME="Rivalz"

# Создаем Dockerfile
cat <<EOF > Dockerfile
FROM node:18

# Установка зависимостей
RUN npm install -g rivalz-node-cli

# Создаем рабочую директорию
WORKDIR /app

# Устанавливаем переменную окружения для приглашения PS1
ENV PS1="[$CONTAINER_NAME] \w\$ "

# Команда запуска ноды
CMD ["sh", "-c", "rivalz run"]
EOF

# Создаем docker-compose.yml
cat <<EOF > docker-compose.yml
version: '3.8'
services:
  $CONTAINER_NAME:
    build: .
    container_name: $CONTAINER_NAME
    restart: always
    environment:
      - WALLET_ADDRESS=$WALLET_ADDRESS
      - DISK_SIZE=$DISK_SIZE
    volumes:
      - ./logs:/app/logs
EOF

# Создаем директорию для логов
mkdir -p logs

# Проверяем наличие docker-compose и устанавливаем, если отсутствует
if ! command -v docker-compose &> /dev/null; then
  echo "docker-compose не найден, устанавливаю..."
  curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
  chmod +x /usr/local/bin/docker-compose
fi

# Строим и запускаем контейнер
docker-compose up -d --build

# Показать логи контейнера
echo -e "Контейнер запущен. Для просмотра логов в реальном времени выполните команду:\n  docker logs -f $CONTAINER_NAME"

echo -e "Для входа в контейнер выполните команду:\n  docker exec -it $CONTAINER_NAME bash"

echo -e "Для проверки логов внутри контейнера выполните команду:\n  tail -f /app/logs/node.log"
